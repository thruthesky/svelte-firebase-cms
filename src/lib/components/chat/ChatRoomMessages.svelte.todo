<script lang="ts">
	import {
		fetch,
		unsubscribe,
		values,
		noMoreData,
		reset
	} from '$lib/store/infinite-value-list.store.js';

	import { getAuth } from 'firebase/auth';
	import { getDatabase } from 'firebase/database';
	import { onDestroy, onMount, tick } from 'svelte';
	import InfiniteScroll from './InfiniteScroll.svelte';
	import SignedIn from '../SignedIn.svelte';

	export let chatRoomId: string;

	let _path = '';
	let _messages: any[] = [];

	let messagesContainer: HTMLElement;

	const auth = getAuth();
	function getUserUid(): string {
		return auth.currentUser?.uid ?? '';
	}

	async function loadMore() {
		// save the curent scroll position
		const _currentScrollHeight = messagesContainer.scrollHeight;

		// This will not move the scroll but scroll height becomes taller
		// _messages.unshift(...additionalMessages);
		_messages = _messages;

		// Wait for the next render cycle
		await tick();

		// Must maintain the height
		const _updatedScrollHeight = messagesContainer.scrollHeight;
		const _scrollHeightDelta = _updatedScrollHeight - _currentScrollHeight;

		// Set the scroll Top to position it to stay the position
		messagesContainer.scrollTop = messagesContainer.scrollTop + _scrollHeightDelta;

		console.log('_currentScrollHeight: ' + _currentScrollHeight);
		console.log('_updatedScrollHeight: ' + _updatedScrollHeight);
	}

	onMount(() => {
		console.log('Just Mounted. Scrolling at bottomost');

		// TODO: The possible problem here is when the chat messages are delayed.
		messagesContainer.scrollTop = messagesContainer.scrollHeight;
		_path = 'chat-messages/' + getUserUid() + '/' + chatRoomId;
	});

	onDestroy(() => {
		unsubscribe();
		console.log('InfiniteValueList destroyed');
	});

	// TODO must be called to move the scroll at bottomost
	async function onNewMessage() {
		// Wait for the next render cycle
		await tick();
		const threshold = 300;
		const bottom =
			messagesContainer.scrollHeight - messagesContainer.clientHeight - messagesContainer.scrollTop;
		// Only move the scroll down if the user is at bottom
		if (bottom <= threshold) {
			messagesContainer.scrollTop = messagesContainer.scrollHeight;
		}
	}
</script>

<p>
	Chat Room ID: {chatRoomId}
</p>
<SignedIn let:user>
	Signed In with {user.uid}
</SignedIn>
<div id="chat-room-messages" bind:this={messagesContainer}>
	{#if _messages}
		<div style="height:100%;"></div>
		<!-- TODO revise if we need it because this might be different case if we got the array in JSON  -->
		{#each _messages as k}
			<slot messageData={k} />
		{/each}
	{:else}
		<!-- Display this slot when data is loading -->
		<slot name="loading" />
	{/if}
	<InfiniteScroll on:topReach={loadMore} />
</div>

<style>
	#chat-room-messages {
		/* TODO the flex here should be easily modified */
		display: flex;
		flex: 1;
		flex-flow: column;
		overflow-y: auto;
	}
</style>
